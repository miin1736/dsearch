version: '3.8'

services:
  # FastAPI Application
  app:
    build: .
    container_name: dsearch_api
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - DATABASE_URL=postgresql+asyncpg://dsearch:dsearch123@postgres:5432/dsearch
      - ELASTICSEARCH_URLS=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379/0
      - DEPLOYMENT_MODE=docker
    depends_on:
      - postgres
      - elasticsearch
      - redis
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
      - ./offline_packages:/app/offline_packages:ro
    restart: unless-stopped
    networks:
      - dsearch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: dsearch_postgres
    environment:
      POSTGRES_DB: dsearch
      POSTGRES_USER: dsearch
      POSTGRES_PASSWORD: dsearch123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - dsearch-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dsearch"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch (Docker 환경용)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.0
    container_name: dsearch_elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - bootstrap.memory_lock=true
      - "indices.query.bool.max_clause_count=10000"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/config:/usr/share/elasticsearch/config:ro
      - ./elasticsearch/plugins:/usr/share/elasticsearch/plugins:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    networks:
      - dsearch-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: dsearch_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - dsearch-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kibana (선택사항 - 개발/관리용)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.0
    container_name: dsearch_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - dsearch-network
    profiles:
      - management

  # Redis Commander (선택사항 - 개발/관리용)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dsearch_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - dsearch-network
    profiles:
      - management

volumes:
  postgres_data:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local

networks:
  dsearch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16