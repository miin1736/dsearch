version: '3.8'

services:
  # FastAPI Application
  app:
    build: .
    container_name: dsearch_api
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - DATABASE_URL=postgresql+asyncpg://dsearch:dsearch123@postgres:5432/dsearch
      - ELASTICSEARCH_URLS=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - elasticsearch
      - redis
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - dsearch-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: dsearch_postgres
    environment:
      POSTGRES_DB: dsearch
      POSTGRES_USER: dsearch
      POSTGRES_PASSWORD: dsearch123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - dsearch-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.18.0
    container_name: dsearch_elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    restart: unless-stopped
    networks:
      - dsearch-network
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Redis
  redis:
    image: redis:7-alpine
    container_name: dsearch_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - dsearch-network

  # Kibana (for Elasticsearch management)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.18.0
    container_name: dsearch_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - dsearch-network

  # Redis Commander (for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dsearch_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - dsearch-network

  # Nginx (reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: dsearch_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - dsearch-network

volumes:
  postgres_data:
  elasticsearch_data:
  redis_data:

networks:
  dsearch-network:
    driver: bridge